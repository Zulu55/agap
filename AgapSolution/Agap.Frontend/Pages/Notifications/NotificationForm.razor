﻿@using Agap.Shared.Entities
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigationAsync"></NavigationLock>

<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <!-- Campo para el mensaje del título -->
        <div class="form-field">
            <label>Mensaje del Título:</label>
            <InputText class="form-control" @bind-Value="@Notification.TitleMessage" />
            <ValidationMessage For="@(() => Notification.TitleMessage)" />
        </div>

        <!-- Campo para el mensaje del cuerpo -->
        <div class="form-field">
            <label>Mensaje del Cuerpo:</label>
            <InputText class="form-control" @bind-Value="@Notification.BodyMessage" />
            <ValidationMessage For="@(() => Notification.BodyMessage)" />
        </div>

        <!-- Campo para seleccionar el cultivo -->
        <div class="form-field">
            <label>Cultivo:</label>
            <Select class="form-control" value="@SelectedCropId" @onchange="OnCropChanged">
                <option value="">-- Seleccione --</option>
                @foreach (var crop in crops)
                {
                    <option value="@crop.Id">@crop.Name</option>
                }
            </Select>
            <ValidationMessage For="@(() => Notification.CropId)" />
        </div>

        <!-- Campo para la periodicidad -->
        <div class="form-field">
            <label>Periodicidad:</label>
            <InputNumber class="form-control" @bind-Value="@Notification.Periodicity" />
            <ValidationMessage For="@(() => Notification.Periodicity)" />
        </div>

        <!-- Botones de acción -->
        <button class="btn btn-primary" type="submit">Guardar</button>
        <button class="btn btn-secondary" @onclick="ReturnAction">Regresar</button>
    </div>
</EditForm>

@code {
    private EditContext editContext = null!;
    private List<Crop> crops = new List<Crop>();
    public string SelectedCropId { get; set; }

    [EditorRequired]
    [Parameter]
    public Notification Notification { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; }

    private bool loading;

    protected override void OnInitialized()
    {
        editContext = new(Notification);
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadCropsAsync();
    }

    private async Task LoadCropsAsync()
    {
        var response = await repository.GetAsync<List<Crop>>("api/crops/all");
        if (!response.Error)
        {
            crops = response.Response;
            SelectedCropId = Notification.CropId.ToString();
        }
    }

    private void OnCropChanged(ChangeEventArgs e)
    {
        SelectedCropId = e.Value.ToString();
        Notification.CropId = Convert.ToInt32(SelectedCropId);
    }

    private async Task OnBeforeInternalNavigationAsync(LocationChangingContext context)
    {
        var formWasEdited = editContext.IsModified();

        if (!formWasEdited || FormPostedSuccessfully)
        {
            return;
        }

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = !string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }
}
