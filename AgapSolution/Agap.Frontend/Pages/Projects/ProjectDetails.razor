@page "/projects/details/{ProjectId:int}"
@using Agap.Frontend.Pages.Crops;
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize(Roles = "Admin")]


@if (project is null)
{
    <Loading />
}
else
{
    <div class="card">
        <div class="card-header">
            <span>
                <i class="oi oi-globe"></i> @project.Name
                @if (userRole == "Admin")
                {
                    <a class="btn btn-sm btn-primary float-end mx-1" @onclick=@(() => ShowModalAsync())><i class="oi oi-plus"></i> Adicionar Cultivo</a>
                }
                <a class="btn btn-sm btn-success float-end" href="/projects"><i class="oi oi-arrow-thick-left" /> Regresar</a>
            </span>
        </div>
        <div class="card-body">
            <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
                <div>
                    <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar cultivo..." @bind-value="Filter" />
                </div>
                <div class="mx-1">
                    <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync"><i class="oi oi-layers" /> Filtrar</button>
                    <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Limpiar</button>
                </div>
            </div>

            <Pagination CurrentPage="currentPage"
                        TotalPages="totalPages"
                        SelectedPage="SelectedPageAsync" />

            <h4>Cultivos</h4>
            <GenericList MyList="crops!">
                <Body>
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Nombre</th>
                                <th>Dueño</th>
                                <th>Proyecto</th>
                                <th>Estado</th>
                                <th>Fecha de Inicio</th>
                                <th>Presupuesto Asignado</th>
                                <th>Gasto Esperado</th>
                                <th>Área (m2)</th>
                                <th style="width:168px"></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var crop in crops!)
                            {
                                <tr>
                                    <td>@crop.Name</td>
                                    <td>@crop.User.FullName</td>
                                    <td>@crop.Project.Name</td>
                                    <td>@crop.Status</td>
                                    <td>@crop.StartDate.ToShortDateString()</td>
                                    <td>@crop.AssignedBudget</td>
                                    <td>@crop.ExpectedExpense</td>
                                    <td>@crop.Area</td>
                                    <td>
                                        <div class="btn-group" role="group" aria-label="Acciones de Cultivo">
                                            @if (userRole == "Admin")
                                            {
                                                <a class="btn btn-warning btn-sm me-2" @onclick=@(() => ShowModalAsync(crop.Id, true))><i class="oi oi-pencil" /> Editar</a>
                                                <button class="btn btn-danger btn-sm me-2" @onclick=@(() => DeleteAsync(crop))><i class="oi oi-trash" /> Borrar</button>
                                                <button class="btn btn-info btn-sm" @onclick=@(() => CloseCropAsync(crop))><i class="oi oi-lock-locked" /> Cerrar</button>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </Body>
            </GenericList>
        </div>
    </div>
}

@code {
    private Project? project;
    private List<Crop>? crops;
    private int currentPage = 1;
    private int totalPages;

    [CascadingParameter]
    IModalService Modal { get; set; } = default!;

    [Parameter]
    public int ProjectId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = string.Empty;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = string.Empty;

    private string userRole = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userRole = user.FindFirst(c => c.Type.Contains("role"))?.Value ?? string.Empty;
        }
        await LoadAsync();
    }

    private async Task ShowModalAsync(int id = 0, bool isEdit = false)
    {
        IModalReference modalReference;

        if (isEdit)
        {
            modalReference = Modal.Show<CropEdit>(string.Empty, new ModalParameters().Add("CropId", id));
        }
        else
        {
            modalReference = Modal.Show<CropCreate>(string.Empty, new ModalParameters().Add("ProjectId", ProjectId));
        }

        var result = await modalReference.Result;
        if (result.Confirmed)
        {
            await LoadAsync();
        }
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }


    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        var ok = await LoadProjectAsync();
        if (ok)
        {
            ok = await LoadCropsAsync(page);
            if (ok)
            {
                await LoadPagesAsync();
            }
        }
    }

    private async Task LoadPagesAsync()
    {
        var url = string.Empty;
        if (string.IsNullOrEmpty(Filter))
        {
            url = $"api/crops/totalPages?id={ProjectId}";
        }
        else
        {
            url = $"api/crops/totalPages?id={ProjectId}&filter={Filter}";
        }

        var response = await repository.GetAsync<int>(url);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        totalPages = response.Response;
    }


    private async Task<bool> LoadCropsAsync(int page)
    {
        var url = string.Empty;
        if (string.IsNullOrEmpty(Filter))
        {
            url = $"api/crops?id={ProjectId}&page={page}";
        }
        else
        {
            url = $"api/crops?id={ProjectId}&page={page}&filter={Filter}";
        }

        var response = await repository.GetAsync<List<Crop>>(url);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return false;
        }
        crops = response.Response;
        return true;
    }

    private async Task<bool> LoadProjectAsync()
    {
        var response = await repository.GetAsync<Project>($"/api/projects/{ProjectId}");
        if (response.Error)
        {
            if (response.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/projects");
                return false;
            }

            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return false;
        }
        project = response.Response;
        return true;
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }

    private async Task DeleteAsync(Crop crop)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = $"¿Realmente deseas eliminar el cultivo? {crop.Name}",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.DeleteAsync($"/api/crops/{crop.Id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();
        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 3000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Registro borrado con éxito.");
    }

    private async Task CloseCropAsync(Crop crop)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = $"¿Realmente deseas cerrar el cultivo? {crop.Name}",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        if (result.IsConfirmed)
        {
            var response = await repository.PutAsync<object>($"api/crops/closecrop/{crop.Id}", null);

            if (response.Error)
            {
                var message = await response.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                // Actualizar la interfaz de usuario según sea necesario
                await LoadAsync();

                // Mostrar un mensaje de éxito
                var toast = sweetAlertService.Mixin(new SweetAlertOptions
                    {
                        Toast = true,
                        Position = SweetAlertPosition.BottomEnd,
                        ShowConfirmButton = false,
                        Timer = 3000
                    });
                await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Cultivo cerrado con éxito.");
            }
        }
    }
}