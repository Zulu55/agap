@page "/crops/create/{ProjectId:int}"
@attribute [Authorize(Roles = "Admin")]
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService sweetAlertService

<h3>Nuevo Cultivo</h3>

<CropForm @ref="cropForm" Crop="crop" OnValidSubmit="CreateAsync" ReturnAction="Return" />

@code {
    private Crop crop = new();
    private CropForm? cropForm;

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [Parameter]
    public int ProjectId { get; set; }

    private async Task CreateAsync()
    {
        crop.ProjectId = ProjectId;
        var response = await repository.PostAsync("/api/crops", crop);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        
        await BlazoredModal.CloseAsync(ModalResult.Ok());
        Return();

        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 3000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Registro creado con éxito.");
    }

    private void Return()
    {
        cropForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo($"/projects/details/{ProjectId}");
    }
}